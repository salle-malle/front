name: Deploy Frontend to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          # 1. 빌드 결과물을 하나의 파일로 압축
          # .next, node_modules, public, src, package.json 등 필요한 모든 것을 포함
          tar -czf deploy.tar.gz .next node_modules public src package.json pnpm-lock.yaml next.config.mjs deploy.sh ecosystem.config.js

          # 2. 압축된 파일을 실제 배포 폴더로 바로 전송
          scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no deploy.tar.gz ubuntu@43.200.100.172:/var/www/salle-malle-front/

          # 3. 실제 배포 폴더로 바로 이동해서 deploy.sh 실행
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@43.200.100.172 "cd /var/www/salle-malle-front && chmod +x deploy.sh && ./deploy.sh"
